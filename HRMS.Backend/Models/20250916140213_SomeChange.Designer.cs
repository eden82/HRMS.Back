// <auto-generated />
using System;
using HRMS.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRMS.Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250916140213_SomeChange")]
    partial class SomeChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HRMS.Backend.Models.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Announcementcontent")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrganizationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("TenantID");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Applicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Applications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Appliedfor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Fordepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResumeUrl")
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("applicants", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("asset_name");

                    b.Property<string>("AssetTag")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("asset_tag");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("category");

                    b.Property<string>("ConditionNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition_notes");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("IssuedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("issued_on");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<DateTime?>("ReturnedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("returned_on");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "TenantId");

                    b.HasIndex("OrganizationId", "TenantId");

                    b.HasIndex("TenantId", "AssetTag")
                        .IsUnique()
                        .HasFilter("[asset_tag] IS NOT NULL");

                    b.HasIndex("TenantId", "Category");

                    b.ToTable("assets", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("date")
                        .HasColumnName("attendance_date");

                    b.Property<DateTime?>("ClockIn")
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("clock_in");

                    b.Property<DateTime?>("ClockOut")
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("clock_out");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<string>("ExceptionNote")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("exception_note");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("ShiftName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shift_name");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("source");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "AttendanceDate")
                        .HasDatabaseName("IX_attendance_tenant_date");

                    b.HasIndex("EmployeeId", "TenantId", "AttendanceDate")
                        .IsUnique()
                        .HasDatabaseName("UX_attendance_employee_tenant_date");

                    b.ToTable("attendance", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TenantId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("department_code");

                    b.Property<Guid?>("DepartmentHeadId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department_head_id");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("InitialEmployeeCount")
                        .HasColumnType("int");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<Guid?>("ParentDepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_department_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasAlternateKey("Id", "OrganizationId", "TenantId")
                        .HasName("AK_departments_id_org_tenant");

                    b.HasIndex("TenantId");

                    b.HasIndex("DepartmentHeadId", "TenantId");

                    b.HasIndex("OrganizationId", "DepartmentCode")
                        .IsUnique()
                        .HasFilter("[department_code] IS NOT NULL");

                    b.HasIndex("OrganizationId", "DepartmentName")
                        .IsUnique();

                    b.HasIndex("OrganizationId", "TenantId");

                    b.HasIndex("ParentDepartmentId", "OrganizationId", "TenantId");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address");

                    b.Property<string>("BankDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bank_details");

                    b.Property<string>("BenefitsEnrollment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("benefits_enrollment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("CustomFields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("custom_fields");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("emergency_contact_name");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("emergency_contact_number");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("employee_code");

                    b.Property<string>("EmployeeEducationStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("employee_education_status");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("employee_type");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gender");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("job_title");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("hire_date");

                    b.Property<DateTime>("LastCreditUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<decimal>("LeaveCredit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("leave_credit");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("marital_status");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nationality");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)")
                        .HasColumnName("photo_url");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<string>("ShiftDetails")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shift_details");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime?>("TerminatedDate")
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("terminated_date");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("EmployeeID");

                    b.HasAlternateKey("EmployeeID", "TenantId")
                        .HasName("AK_employees_id_tenant");

                    b.HasIndex("RoleId");

                    b.HasIndex("OrganizationId", "TenantId");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique();

                    b.HasIndex("TenantId", "EmployeeCode")
                        .IsUnique()
                        .HasFilter("[employee_code] IS NOT NULL");

                    b.HasIndex("TenantId", "Username")
                        .IsUnique();

                    b.HasIndex("DepartmentId", "OrganizationId", "TenantId");

                    b.ToTable("employees", null, t =>
                        {
                            t.HasCheckConstraint("CHK_emp_custom_fields_json", "custom_fields IS NULL OR ISJSON(custom_fields) = 1");
                        });
                });

            modelBuilder.Entity("HRMS.Backend.Models.EmployeeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("effective_to");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasColumnName("is_primary");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.HasIndex("EmployeeId", "RoleId", "TenantId")
                        .IsUnique();

                    b.ToTable("employee_roles", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GoalTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("OrganizationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("TenantID");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("InterviewNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InterviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShortlistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("InterviewerId");

                    b.HasIndex("ShortlistId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("ApplicationDeadline")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalaryRange")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("TenantID");

                    b.ToTable("jobs");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("AppliedOn")
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("applied_on");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("approved_by");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid>("LeaveTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("leave_type_id");

                    b.Property<string>("ManagerComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("manager_comment");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("ApprovedBy", "TenantId");

                    b.HasIndex("EmployeeId", "TenantId");

                    b.HasIndex("TenantId", "EmployeeId", "StartDate", "EndDate");

                    b.ToTable("leaves", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.LeaveType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("CarryForward")
                        .HasColumnType("bit")
                        .HasColumnName("carry_forward");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasColumnName("is_paid");

                    b.Property<int>("MaxDays")
                        .HasColumnType("int")
                        .HasColumnName("max_days");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("bit")
                        .HasColumnName("requires_approval");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("HRMS.Backend.Models.OrgSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("AbsentIfNoClockIn")
                        .HasColumnType("bit")
                        .HasColumnName("absent_if_no_clockin");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<int>("HalfDayUnderHours")
                        .HasColumnType("int")
                        .HasColumnName("halfday_under_hours");

                    b.Property<int>("LateAfterMinutes")
                        .HasColumnType("int")
                        .HasColumnName("late_after_minutes");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("time_zone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<TimeSpan>("WorkDayEnd")
                        .HasColumnType("time")
                        .HasColumnName("workday_end");

                    b.Property<TimeSpan>("WorkDayStart")
                        .HasColumnType("time")
                        .HasColumnName("workday_start");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId", "OrganizationId")
                        .IsUnique();

                    b.ToTable("org_settings", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("domain");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("industry");

                    b.Property<string>("IpRestrictions")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("ip_restrictions");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("location");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("organization_name");

                    b.Property<string>("OrgCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("org_code");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.HasKey("Id");

                    b.HasAlternateKey("Id", "TenantId")
                        .HasName("AK_organizations_id_tenant");

                    b.HasIndex("TenantId", "Domain")
                        .IsUnique()
                        .HasFilter("[domain] IS NOT NULL");

                    b.HasIndex("TenantId", "OrgCode")
                        .IsUnique()
                        .HasFilter("[org_code] IS NOT NULL");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.PerformanceReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("Communication")
                        .HasColumnType("int");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Innovation")
                        .HasColumnType("int");

                    b.Property<int>("Leadership")
                        .HasColumnType("int");

                    b.Property<string>("OverallFeedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("ReviewCycle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ReviewPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReviewPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Teamwork")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalSkill")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("performance_reviews", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.RequestFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FeedbackDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackSources")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InstructionReviewers")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("RequestFeedbacks");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("is_system");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PermissionsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("permissions");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique()
                        .HasFilter("[tenant_id] IS NOT NULL");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Full cross-tenant access",
                            IsSystem = true,
                            Name = "SuperAdmin",
                            PermissionsJson = "[\"*\"]"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Tenant-wide HR/admin; approve leave",
                            IsSystem = true,
                            Name = "HRAdmin",
                            PermissionsJson = "[\"tenant.manage\",\"employees.read\",\"employees.create\",\"employees.update\",\"employees.delete\",\"departments.read\",\"departments.create\",\"departments.update\",\"departments.delete\",\"leave.read\",\"leave.approve\",\"attendance.read\",\"attendance.edit\"]"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Description = "Standard employee self-service",
                            IsSystem = true,
                            Name = "Employee",
                            PermissionsJson = "[\"self.read\",\"self.update\",\"attendance.clock\",\"attendance.read.self\",\"leave.request\",\"leave.read.self\"]"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "Manage team in same department; approve leave in dept",
                            IsSystem = true,
                            Name = "Manager",
                            PermissionsJson = "[\"employees.read.dept\",\"employees.update.dept\",\"leave.read.dept\",\"leave.approve.dept\",\"attendance.read.dept\"]"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Description = "Read-only for team in dept; review leave",
                            IsSystem = true,
                            Name = "SubManager",
                            PermissionsJson = "[\"employees.read.dept\",\"leave.read.dept\",\"attendance.read.dept\"]"
                        });
                });

            modelBuilder.Entity("HRMS.Backend.Models.Shortlist", b =>
                {
                    b.Property<Guid>("ShortlistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("JobID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResumeUrl")
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<DateTime>("ShortlistedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ShortlistID");

                    b.HasIndex("JobID");

                    b.ToTable("shortlists");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AttendanceTracking")
                        .HasColumnType("bit");

                    b.Property<string>("BackupFrequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<bool>("CriticalAlertsOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("DataEncryptionAtRest")
                        .HasColumnType("bit");

                    b.Property<int>("DataRetentionYears")
                        .HasColumnType("int");

                    b.Property<string>("DefaultExportFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("domain");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("EmployeeManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableAuditLogging")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSSO")
                        .HasColumnType("bit");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("industry");

                    b.Property<bool>("LeaveManagement")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("tenant_name");

                    b.Property<string>("PasswordPolicy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PerformanceManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("PushNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("Recruitment")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireTwoFactorAuth")
                        .HasColumnType("bit");

                    b.Property<string>("SSOProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionTimeout")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TrainingDevelopment")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(3)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.HasKey("Id");

                    b.HasIndex("Domain")
                        .IsUnique();

                    b.ToTable("tenants", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.TenantSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantSettings");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DurationHours")
                        .HasColumnType("int")
                        .HasColumnName("duration_hours");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date_utc");

                    b.Property<string>("InstructorName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("instructor_name");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<int?>("MaxEnrollment")
                        .HasColumnType("int")
                        .HasColumnName("max_enrollment");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<DateTime?>("StartDateUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date_utc");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId", "OrganizationId", "Title");

                    b.ToTable("training_programs", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.TrainingEnrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CompletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("completed_on_utc");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("EnrolledOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("enrolled_on_utc");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("program_id");

                    b.Property<int>("ProgressPercent")
                        .HasColumnType("int")
                        .HasColumnName("progress_percent");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "TenantId");

                    b.HasIndex("ProgramId", "EmployeeId", "TenantId")
                        .IsUnique();

                    b.ToTable("training_enrollments", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.TrainingFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("comment");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("program_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateTime>("SubmittedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("submitted_on_utc");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "TenantId");

                    b.HasIndex("ProgramId", "EmployeeId", "TenantId")
                        .IsUnique();

                    b.ToTable("training_feedback", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.TrainingMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("FilePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("file_path");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("program_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UploadedAtUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("uploaded_at_utc");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("training_materials", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.TrainingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("EndsAtUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("ends_at_utc");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit")
                        .HasColumnName("is_online");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("location");

                    b.Property<string>("MeetingLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("meeting_link");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("notes");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("program_id");

                    b.Property<DateTime>("StartsAtUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("starts_at_utc");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId", "StartsAtUtc");

                    b.ToTable("training_sessions", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login_utc");

                    b.Property<DateTime?>("LockoutEndUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("lockout_end_utc");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("normalized_username");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("organization_id");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_salt");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("phone_confirmed");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("security_stamp");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tenant_id");

                    b.Property<string>("TfaSecret")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tfa_secret");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasFilter("[normalized_email] IS NOT NULL");

                    b.HasIndex("NormalizedUsername")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("HRMS.Backend.Models.Announcement", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Department", "Department")
                        .WithMany("Announcements")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("HRMS.Backend.Models.Organization", "Organization")
                        .WithMany("Announcements")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany("Announcements")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Organization");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Applicant", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Job", "Job")
                        .WithMany("Applicants")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Job");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Asset", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId", "TenantId")
                        .HasPrincipalKey("EmployeeID", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HRMS.Backend.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId", "TenantId")
                        .HasPrincipalKey("Id", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Organization");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Attendance", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany("Attendances")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId", "TenantId")
                        .HasPrincipalKey("EmployeeID", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.AuditLog", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Department", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany("Departments")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Employee", "DepartmentHead")
                        .WithMany()
                        .HasForeignKey("DepartmentHeadId", "TenantId")
                        .HasPrincipalKey("EmployeeID", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HRMS.Backend.Models.Organization", "Organization")
                        .WithMany("Departments")
                        .HasForeignKey("OrganizationId", "TenantId")
                        .HasPrincipalKey("Id", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Department", "ParentDepartment")
                        .WithMany("ChildDepartments")
                        .HasForeignKey("ParentDepartmentId", "OrganizationId", "TenantId")
                        .HasPrincipalKey("Id", "OrganizationId", "TenantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DepartmentHead");

                    b.Navigation("Organization");

                    b.Navigation("ParentDepartment");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Employee", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany("Employees")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Organization", "Organization")
                        .WithMany("Employees")
                        .HasForeignKey("OrganizationId", "TenantId")
                        .HasPrincipalKey("Id", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId", "OrganizationId", "TenantId")
                        .HasPrincipalKey("Id", "OrganizationId", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.EmployeeRole", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Role", "Role")
                        .WithMany("Members")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Goal", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Organization");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Interview", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Applicant", null)
                        .WithMany("Interviews")
                        .HasForeignKey("ApplicantId");

                    b.HasOne("HRMS.Backend.Models.Employee", "Interviewer")
                        .WithMany()
                        .HasForeignKey("InterviewerId");

                    b.HasOne("HRMS.Backend.Models.Shortlist", "Shortlist")
                        .WithMany()
                        .HasForeignKey("ShortlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interviewer");

                    b.Navigation("Shortlist");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Job", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Leave", b =>
                {
                    b.HasOne("HRMS.Backend.Models.LeaveType", "LeaveType")
                        .WithMany("Leaves")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Employee", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy", "TenantId")
                        .HasPrincipalKey("EmployeeID", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HRMS.Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId", "TenantId")
                        .HasPrincipalKey("EmployeeID", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.LeaveType", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Organization", "Organization")
                        .WithMany("LeaveTypes")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("HRMS.Backend.Models.OrgSetting", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Organization", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany("Organizations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.PerformanceReview", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMS.Backend.Models.RefreshToken", b =>
                {
                    b.HasOne("HRMS.Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HRMS.Backend.Models.RequestFeedback", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Role", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany("Roles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Shortlist", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("HRMS.Backend.Models.TenantSetting", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Training", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HRMS.Backend.Models.TrainingEnrollment", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Training", "Program")
                        .WithMany("Enrollments")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId", "TenantId")
                        .HasPrincipalKey("EmployeeID", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("HRMS.Backend.Models.TrainingFeedback", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Training", "Program")
                        .WithMany("Feedback")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMS.Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId", "TenantId")
                        .HasPrincipalKey("EmployeeID", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("HRMS.Backend.Models.TrainingMaterial", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Training", "Program")
                        .WithMany("Materials")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("HRMS.Backend.Models.TrainingSession", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Training", "Program")
                        .WithMany("Sessions")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("HRMS.Backend.Models.User", b =>
                {
                    b.HasOne("HRMS.Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HRMS.Backend.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HRMS.Backend.Models.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");

                    b.Navigation("Organization");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Applicant", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Department", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("ChildDepartments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Employee", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Job", b =>
                {
                    b.Navigation("Applicants");
                });

            modelBuilder.Entity("HRMS.Backend.Models.LeaveType", b =>
                {
                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Organization", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("LeaveTypes");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Role", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Tenant", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Attendances");

                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Organizations");

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HRMS.Backend.Models.Training", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Feedback");

                    b.Navigation("Materials");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
